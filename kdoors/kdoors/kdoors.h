
#ifndef KDOORS_H
#define KDOORS_H
 

#ifdef HAVE_CONFIG_H
#include <config.h>
#endif


// include files for Qt
#include <qdom.h>
// include files for KDE
#include <kapp.h>
#include <kmainwindow.h>
#include <kdockwidget.h>
#include <kaccel.h>
#include <kaction.h>
#include <kprocess.h>
#include <kprogress.h>



#include "kdpluginslistbox.h"
#include "kdresultview.h"
#include "kdhostview.h"


// forward declaration of the KDoors classes
//class KDoorsDoc;
class KDHostView;
class KDPluginsListBox;
class KDResultView;
/**
  * The base class for KDoors application windows. It sets up the main
  * window and reads the config file as well as providing a menubar, toolbar
  * and statusbar. An instance of KDoorsView creates your center view, which is connected
  * to the window's Doc object.
  * KDoorsApp reimplements the methods that KMainWindow provides for main window handling and supports
  * full session management as well as using KActions.
  * @see KMainWindow
  * @see KApplication
  * @see KConfig
  *
  * @author Source Framework Automatically Generated by KDevelop, (c) The KDevelop Team.
  * @version KDevelop version 1.2 code generation
  */
class KDoorsApp : public KDockMainWindow
{
  Q_OBJECT

//  friend class KDoorsView;

  public:
    /** construtor of KDoorsApp, calls all init functions to create the application.
     */
    KDoorsApp(QWidget* parent=0, const char* name=0);
    ~KDoorsApp();
    /** opens a file specified by commandline option
     */
    void openDocumentFile(const KURL& url=0);
    /** returns a pointer to the current document connected to the KTMainWindow instance and is used by
     * the View class to access the document object's methods
     */	
//    KDoorsDoc *getDocument() const; 	



    /** save general Options like all bar positions and status as well as the geometry and the recent file list to the configuration
     * file
     */ 	
    void saveOptions();
    /** read general Options again and initialize all variables like the recent file list
     */
    void readOptions();
    /** initializes the KActions of the application */
    void initActions();
		// initalise le menu
		void initMenuBar();

    /** sets up the statusbar for the main window by initialzing a statuslabel.
     */
    void initStatusBar();
    /** initializes the document object of the main window that is connected to the view in initView().
     * @see initView();
     */
    void initDocument();
    /** creates the centerwidget of the KTMainWindow instance and sets it as the view
     */
    void initView();
    /** queryClose is called by KTMainWindow on each closeEvent of a window. Against the
     * default implementation (only returns true), this calles saveModified() on the document object to ask if the document shall
     * be saved if Modified; on cancel the closeEvent is rejected.
     * @see KTMainWindow#queryClose
     * @see KTMainWindow#closeEvent
     */
    virtual bool queryClose();
    /** queryExit is called by KTMainWindow when the last window of the application is going to be closed during the closeEvent().
     * Against the default implementation that just returns true, this calls saveOptions() to save the settings of the last window's	
     * properties.
     * @see KTMainWindow#queryExit
     * @see KTMainWindow#closeEvent
     */
    virtual bool queryExit();
    /** saves the window properties for each open window during session end to the session config file, including saving the currently
     * opened file by a temporary filename provided by KApplication.
     * @see KTMainWindow#saveProperties
     */
    virtual void saveProperties(KConfig *_cfg);
    /** reads the session config file and restores the application's state including the last opened files and documents by reading the
     * temporary files saved by saveProperties()
     * @see KTMainWindow#readProperties
     */
    virtual void readProperties(KConfig *_cfg);


  public slots:
		/** supprime les nom de domaine vide*/
		void slotClearNoDomain();
		/** supprime les hotes non dispo*/
		void slotClearNoUp();
		/** lors un ping se terminee*/
		void slotPingExit(KProcess* AProcess);
		/** ouvre un plugins*/
		void slotOpenPlugins();
		/** effacer les hotes*/
		void slotClearHosts();
		/** ouvre un fichier host*/
		void slotOpenHosts();
		/** sauve un plugins*/
		void slotSavePlugins();
		/** sauve un fichier plugins sous*/
		void slotSaveAsPlugins();
		/** scan*/
		void slotScanHosts();
		/** slot*/
		void slotEndExecute(KProcess* AProcess,const QDomElement& element);
		/** sauve un fichier host sous*/
		void slotSaveAsHosts();
		/** sauve un fichier host*/
		void slotSaveHosts();
		/** menu de test*/
		void slotAddPlugins();
		/** ping la machine*/
		void slotPing();
		/** resoud les nom de domaine*/
		void slotResolveName();
		/** ajoute un range d'ip*/
		void slotaddIpRange();
    /** clears the document in the actual view to reuse it as the new document */
    void slotFileNew();
    /** opens a file from the recent files menu */
    void slotFileOpenRecent(const KURL& url);
    /** asks for saving if the file is modified, then closes the actual file and window*/
    void slotFileClose();
    /** closes all open windows by calling close() on each memberList item until the list is empty, then quits the application.
     * If queryClose() returns false because the user canceled the saveModified() dialog, the closing breaks.
     */
    void slotFileQuit();
    /** put the marked text/object into the clipboard and remove
     *	it from the document
     */
    void slotEditCut();
    /** put the marked text/object into the clipboard
     */
    void slotEditCopy();
    /** paste the clipboard into the document
     */
    void slotEditPaste();
    /** toggles the toolbar
     */
    void slotViewToolBar();
    /** toggles the statusbar
     */
    void slotViewStatusBar();
    /** changes the statusbar contents for the standard label permanently, used to indicate current actions.
     * @param text the text that is displayed in the statusbar
     */
    void slotStatusMsg(const QString &text);


  private:
		/** Compteur du nombre de process pour les pings */
 		void resizeEvent(QResizeEvent*);
		/** Compteur du nombre de process pour les pings */
		int countping;
		/** Barre de progression */
		KProgress* ProgressBar;
		int process_count;


		QPopupMenu* fonction;

    /** the configuration object of the application */
    KConfig *config;
    /** view is the main widget which represents your working area. The View
     * class should handle all events of the view widget.  It is kept empty so
     * you can create your view according to your application's needs by
     * changing the view class.
     */
    KDHostView *viewhost;
    KDResultView *viewresult;
    KDPluginsListBox *viewplugins;
    /** doc represents your actual document and is created only once. It keeps
     * information such as filename and does the serialization of your files.
     */
//    KDoorsDoc *doc;

    // KAction pointers to enable/disable actions
		
		// plugins
  	KAction* fileOpenPlugins;
  	KAction* fileSavePlugins;
  	KAction* fileSaveAsPlugins;
  	KAction* addPlugins;

		// hosts
	  KAction* fileOpenHosts;
		KAction* fileClearHosts;
	  KAction* fileSaveHosts;
	  KAction* fileSaveAsHosts;
	  KAction* scanHosts;


    KAction* fileNew;
    KRecentFilesAction* fileOpenRecent;
//    KAction* fileSaveAs;
    KAction* fileClose;
    KAction* filePrint;
    KAction* fileQuit;
    KAction* editCut;
    KAction* editCopy;
    KAction* editPaste;
    KToggleAction* viewToolBar;
    KToggleAction* viewStatusBar;

		// KDockWidget
		KDockWidget* 	dockhostlist;
		KDockWidget* 	dockresultat;
		KDockWidget* 	dockplugins;
};
 
#endif // KDOORS_H
